###############################################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è–º–∏.   #
###############################################################

from aiogram import (
    Router,
    F,
    types
)
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup

from aiogram.types import ReplyKeyboardRemove


from utils.helpers import FormToCreateVacancy
from services.repository import VacancyRepository
from db.database import session

from utils.keyboards import (
    LIST_KEYBOARD_BUTTONS_FOR_START_HANDLER
)


post_job_router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
storage_dict = {}

# –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ VacancyRepository
vacancy_repository = VacancyRepository(session=session)


@post_job_router.message(F.text == "4Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é")
async def process_create_vacancy(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏.

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∑–∞–ø—Ä–æ—Å–æ–º –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    await state.set_state(FormToCreateVacancy.company_name)
    await message.answer(
        "üè¢ –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏: ",
        reply_markup=ReplyKeyboardRemove()
    )


@post_job_router.message(FormToCreateVacancy.company_name)
async def process_company_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–æ–º–ø–∞–Ω–∏–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    await state.update_data(company_name=message.text)
    await state.set_state(FormToCreateVacancy.description)
    await message.answer(
        "üìñ –û–ø–∏—Å–∞–Ω–∏–µ: "
    )
    storage_dict["company_name"] = message.text


@post_job_router.message(FormToCreateVacancy.description)
async def process_description(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    await state.update_data(description=message.text)
    await state.set_state(FormToCreateVacancy.location)
    await message.answer(
        "üåç –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: "
    )
    storage_dict["description"] = message.text


@post_job_router.message(FormToCreateVacancy.location)
async def process_location(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    await state.update_data(location=message.text)
    await state.set_state(FormToCreateVacancy.salary)
    await message.answer(
        "üí∏ –ó–∞—Ä–ø–ª–∞—Ç–∞: "
    )
    storage_dict["location"] = message.text


@post_job_router.message(FormToCreateVacancy.salary)
async def process_salary(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∑–∞—Ä–ø–ª–∞—Ç—ã –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏.

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    await state.update_data(salary=message.text)
    await state.set_state(FormToCreateVacancy.contacts)
    await message.answer(
        "‚òéÔ∏è –ö–æ–Ω—Ç–∞–∫—Ç—ã: "
    )
    storage_dict["salary"] = message.text


@post_job_router.message(FormToCreateVacancy.contacts)
async def process_contacts(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    await state.update_data(contacts=message.text)
    await state.set_state(FormToCreateVacancy.image_path)
    storage_dict["contacts"] = message.text
    storage_dict["user_id"] = message.from_user.id
    await message.answer(
        "‚¨ú –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: ",
    )


@post_job_router.message(FormToCreateVacancy.image_path)
async def process_image_path(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–∏

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω–æ–π –∑–∞—Ä–ø–ª–∞—Ç–æ–π –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    photo = message.photo[-1]
    file_id = photo.file_id

    await state.update_data(image_path=message.text)
    storage_dict["image_path"] = file_id

    vacancy_info = (
        f"""
            <b>–í–∞–∫–∞–Ω—Å–∏—è:</b>\n
            <b>–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏:</b> {storage_dict["company_name"]}\n
            <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {storage_dict["description"]}\n
            <b>–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:</b> {storage_dict["location"]}\n
            <b>–ó–∞—Ä–ø–ª–∞—Ç–∞:</b> {storage_dict["salary"]}\n
            <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã:</b> {storage_dict["contacts"]}\n
            """
    )

    await message.answer_photo(
        photo=file_id,
        caption=vacancy_info,
        reply_markup=ReplyKeyboardMarkup(
            keyboard=LIST_KEYBOARD_BUTTONS_FOR_START_HANDLER,
            resize_keyboard=True
        ),

    )

    # –°–æ–∑–¥–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        await vacancy_repository.create_vacancy(
            user_id=storage_dict["user_id"],
            company_name=storage_dict["company_name"],
            description=storage_dict["description"],
            location=storage_dict["location"],
            salary=float(storage_dict["salary"]),
            contacts=storage_dict["contacts"],
            image_path=storage_dict["image_path"]

        )
        await state.clear()
        storage_dict.clear()
    except Exception as ex:
        print(f"Failure to create vacancy: {ex}")







#######################################
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞–±–æ—Ç—ã #
#######################################
import os
import uuid

import requests

from aiogram import Bot
from aiogram import Router, F
from aiogram import types, html
from aiogram.client import bot
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardMarkup
from aiogram.types import ReplyKeyboardRemove

from bot.utils.helpers import FormToCreateResume


from bot.services.repository import ResumeRepository

from bot.db.database import session
from bot.config import config_variables

from bot.utils.keyboards import (
    LIST_KEYBOARD_BUTTONS_FOR_START_HANDLER
)

find_job_router = Router()

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ, –ø–æ–∑–∂–µ —É–∑–Ω–∞—é –∫–∞–∫ —Å –Ω–∏–º
storage_dict = {}

# –û–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ ResumeRepository
resume_repository = ResumeRepository(session=session)

bot_find_job = Bot(token=config_variables.TOKEN, parse_mode=ParseMode.HTML)


@find_job_router.message(F.text == "üîô –ù–ê–ó–ê–î")
async def process_back_to_start(message: types.Message):
    await message.answer(
        "BACK",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=LIST_KEYBOARD_BUTTONS_FOR_START_HANDLER,
            resize_keyboard=True
        )
    )


@find_job_router.message(F.text == "4Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ")
async def process_create_resume(message: types.Message, state: FSMContext):
    """
     –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑—é–º–µ.

     Parameters:
         message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
         state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
     """
    await state.set_state(FormToCreateResume.entering_name)
    await message.answer(
        "üìì –ò–º—è –§–∞–º–∏–ª–∏—è: ",
        reply_markup=ReplyKeyboardRemove()
    )
    storage_dict["user_id"] = message.from_user.id


@find_job_router.message(FormToCreateResume.entering_name)
async def process_name(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∏–º–µ–Ω–∏ –∏ —Ñ–∞–º–∏–ª–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ.

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –∏–º–µ–Ω–µ–º –∏ —Ñ–∞–º–∏–ª–∏–µ–π.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    await state.update_data(entering_name=message.text)
    await state.set_state(FormToCreateResume.skills)
    await message.answer(
        f"üë©‚Äçüè≠ {html.quote(message.text)}, —Ç–≤–æ–∏ –Ω–∞–≤—ã–∫–∏: "
    )
    storage_dict["entering_name"] = message.text


@find_job_router.message(FormToCreateResume.skills)
async def process_skills(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–∞–≤—ã–∫–æ–≤ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ.

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    await state.update_data(skills=message.text)
    await state.set_state(FormToCreateResume.experience)
    await message.answer(
        "üíö –û–ø—ã—Ç: "
    )
    storage_dict["skills"] = message.text


@find_job_router.message(FormToCreateResume.experience)
async def process_experience(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–ø—ã—Ç–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ.

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    await state.update_data(experience=message.text)
    await state.set_state(FormToCreateResume.education)
    await message.answer(
        "üßß –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: "
    )
    storage_dict["experience"] = message.text


@find_job_router.message(FormToCreateResume.education)
async def process_education(message: types.Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ.

    Parameters:
        message (types.Message): –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤–≤–µ–¥–µ–Ω–Ω—ã–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º.
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞.
    """
    await state.update_data(education=message.text)
    await state.set_state(FormToCreateResume.image_path)
    await message.answer(
        "‚¨ú –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: "
    )
    storage_dict["education"] = message.text


@find_job_router.message(FormToCreateResume.image_path)
async def process_image_path(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    file_id = photo.file_id

    await state.update_data(image_path=file_id)
    storage_dict["image_path"] = file_id
    await message.answer_photo(
        photo=file_id,
        caption=f"""
                –†–µ–∑—é–º–µ:\n\t\n\t
                –ò–º—è: {storage_dict["entering_name"]},\n\t\n\t
                –ù–∞–≤—ã–∫–∏: {storage_dict["skills"]},\n\t\n\t
                –û–ø—ã—Ç: {storage_dict["experience"]},\n\t\n\t
                –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {storage_dict["education"]},\n\t\n\t
                """,
        reply_markup=ReplyKeyboardMarkup(
            keyboard=LIST_KEYBOARD_BUTTONS_FOR_START_HANDLER,
            resize_keyboard=True
        )

    )

    # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—é–º–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    try:
        await resume_repository.create_resume(
            user_id=storage_dict["user_id"],
            name=storage_dict["entering_name"],
            skills=storage_dict["skills"],
            experience=storage_dict["experience"],
            education=storage_dict["education"],
            image_path=storage_dict["image_path"]
        )
        await state.clear()
        storage_dict.clear()
    except Exception as ex:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑—é–º–µ: {ex}")





